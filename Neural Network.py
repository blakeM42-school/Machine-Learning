import numpy as np

def categorical_cross_entropy(y_true, y_pred):
    # Ensure one-hot encoding
    y_true = np.array(y_true)
    y_pred = np.array(y_pred)
    
    # Clip to prevent NaNs in log
    y_pred = np.clip(y_pred, 1e-15, 1 - 1e-15)
    
    # Compute cross-entropy
    return -np.sum(y_true * np.log(y_pred))

def softmax(x):
    # Reshape x to have shape (num_samples, num_classes)
    x = x.reshape((1, -1))
    exp_values = np.exp(x - np.max(x, axis=1, keepdims=True))
    return exp_values / np.sum(exp_values, axis=1, keepdims=True)

def relu_derivative(x):
    return np.where(x > 0, 1, 0)

# Define your dataset
input_data = np.array([
    [7, 5, 7, 7, 4, 4, 4, 7, 9, 4, 2, 2, 5, 4, 3, 3, 5, 3, 5, 7, 2, 7, 4, 6, 1, 2, 5, 7, 9, 9, 4, 2, 3, 6, 2, 3, 6, 5, 2, 7, 2, 5, 3, 7, 2, 3, 4, 3, 4, 2, 3, 7, 3, 3, 8, 4, 7, 5, 2, 12, 5, 10, 2, 4, 1, 4, 9, 6, 6, 6, 9, 3, 6, 2, 4, 5, 3, 10, 4, 3, 7, 4, 4, 13, 2, 7, 4, 4, 15, 3, 6, 2, 5, 3, 5, 6, 7, 3, 4, 9],
    [5, 3, 9, 6, 7, 3, 4, 4, 2, 3, 7, 3, 4, 2, 5, 5, 3, 4, 3, 6, 3, 6, 8, 2, 7, 3, 4, 2, 5, 4, 7, 2, 6, 3, 9, 3, 4, 6, 9, 2, 3, 3, 5, 5, 6, 5, 3, 6, 6, 3, 3, 6, 5, 3, 2, 4, 9, 8, 4, 3, 7, 4, 3, 5, 2, 5, 1, 3, 4, 5, 7, 4, 5, 5, 4, 4, 5, 6, 6, 4, 9, 3, 5, 8, 2, 4, 2, 7, 7, 4, 5, 2, 8, 4, 2, 4, 4, 4, 2, 9],
    [5, 6, 3, 5, 5, 4, 2, 7, 1, 7, 7, 4, 1, 5, 4, 2, 5, 7, 11, 4, 4, 2, 3, 4, 5, 9, 5, 4, 2, 5, 1, 6, 2, 3, 4, 1, 3, 8, 2, 4, 1, 2, 4, 5, 7, 5, 7, 3, 5, 4, 3, 4, 3, 2, 10, 9, 5, 2, 5, 5, 4, 4, 4, 6, 10, 7, 3, 4, 2, 4, 9, 7, 3, 7, 2, 4, 2, 3, 8, 2, 3, 5, 3, 4, 7, 5, 4, 3, 6, 7, 8, 6, 3, 3, 9, 4, 3, 7, 6, 4],
    [6, 7, 9, 3, 4, 7, 11, 3, 1, 6, 4, 4, 7, 3, 7, 9, 3, 4, 3, 5, 3, 4, 3, 5, 7, 9, 6, 3, 5, 3, 2, 4, 7, 5, 9, 4, 7, 3, 8, 6, 2, 2, 7, 2, 3, 3, 4, 4, 1, 6, 4, 3, 8, 4, 5, 2, 7, 10, 4, 5, 4, 7, 7, 5, 9, 4, 3, 2, 3, 8, 7, 3, 5, 3, 2, 5, 2, 2, 8, 6, 2, 5, 2, 4, 4, 4, 6, 3, 7, 7, 1, 4, 2, 3, 1, 3, 3, 5, 10, 5],
    [5, 3, 9, 3, 3, 10, 4, 7, 3, 8, 4, 5, 2, 12, 13, 11, 3, 3, 7, 9, 4, 9, 3, 7, 4, 9, 3, 7, 9, 5, 11, 5, 3, 4, 3, 3, 7, 7, 6, 2, 9, 3, 5, 3, 8, 6, 3, 7, 3, 4, 4, 10, 3, 6, 3, 9, 4, 15, 2, 3, 5, 9, 3, 11, 3, 8, 2, 6, 4, 9, 5, 4, 3, 2, 4, 7, 7, 4, 3, 3, 3, 2, 4, 9, 4, 4, 9, 9, 3, 3, 7, 4, 3, 3, 6, 3, 5, 4, 10, 3],
    [1, 6, 3, 9, 3, 7, 8, 3, 3, 3, 8, 4, 6, 6, 2, 4, 3, 2, 6, 2, 2, 7, 5, 3, 3, 7, 2, 1, 3, 8, 5, 1, 4, 3, 4, 1, 3, 6, 2, 7, 8, 4, 6, 7, 2, 4, 6, 1, 4, 2, 5, 2, 3, 6, 3, 4, 6, 3, 3, 8, 2, 10, 3, 4, 7, 7, 5, 1, 9, 2, 9, 2, 2, 4, 2, 3, 5, 8, 6, 4, 2, 1, 7, 7, 2, 9, 4, 2, 5, 2, 2, 6, 3, 7, 7, 4, 4, 7, 5, 5],
    [5, 3, 9, 6, 7, 3, 4, 4, 2, 3, 7, 3, 4, 2, 5, 5, 3, 4, 3, 6, 3, 6, 8, 2, 7, 3, 4, 2, 5, 4, 7, 2, 6, 3, 9, 3, 4, 6, 9, 2, 3, 3, 5, 5, 6, 5, 3, 6, 6, 3, 3, 6, 5, 3, 2, 4, 9, 8, 4, 3, 7, 4, 3, 5, 2, 5, 1, 3, 4, 5, 7, 4, 5, 5, 4, 4, 5, 6, 6, 4, 9, 3, 5, 8, 2, 4, 2, 7, 7, 4, 5, 2, 8, 4, 2, 4, 4, 4, 2, 9],
    [1, 6, 3, 9, 2, 3, 4, 5, 4, 2, 3, 6, 3, 3, 5, 4, 2, 4, 2, 2, 3, 4, 5, 5, 7, 1, 3, 4, 2, 4, 12, 6, 2, 4, 5, 7, 9, 3, 6, 3, 5, 1, 2, 11, 5, 6, 3, 2, 6, 7, 5, 2, 8, 6, 1, 7, 2, 10, 7, 2, 2, 3, 7, 2, 12, 4, 4, 8, 6, 2, 3, 5, 4, 1, 2, 6, 3, 3, 3, 7, 11, 1, 4, 3, 2, 3, 4, 10, 4, 5, 6, 2, 6, 1, 4, 4, 3, 3, 5, 3],
    [5, 3, 9, 3, 4, 2, 3, 4, 4, 3, 3, 4, 7, 3, 8, 3, 8, 8, 9, 1, 3, 4, 5, 2, 3, 4, 2, 6, 4, 4, 9, 4, 1, 4, 5, 2, 12, 3, 5, 5, 4, 4, 12, 12, 3, 2, 4, 5, 8, 3, 4, 4, 4, 1, 4, 4, 3, 8, 4, 3, 2, 6, 3, 6, 5, 2, 9, 4, 7, 2, 4, 2, 6, 3, 4, 9, 3, 6, 6, 3, 3, 8, 5, 3, 11, 4, 9, 5, 4, 7, 9, 4, 3, 2, 5, 9, 4, 4, 1, 7],
    [5, 3, 9, 2, 5, 2, 3, 5, 7, 3, 8, 6, 2, 4, 2, 1, 7, 4, 5, 1, 7, 3, 3, 4, 6, 4, 2, 4, 3, 2, 6, 7, 4, 4, 2, 7, 4, 2, 2, 10, 3, 9, 4, 2, 3, 7, 13, 1, 5, 5, 5, 3, 3, 2, 3, 3, 3, 3, 5, 3, 9, 11, 3, 6, 4, 1, 4, 4, 8, 6, 6, 2, 6, 3, 13, 3, 3, 6, 2, 1, 2, 9, 4, 5, 3, 2, 2, 5, 10, 3, 4, 6, 7, 5, 3, 4, 8, 1, 4, 2],
    [4, 14, 9, 3, 5, 2, 5, 2, 3, 7, 2, 5, 9, 3, 11, 2, 3, 2, 8, 3, 8, 6, 4, 9, 9, 3, 1, 9, 6, 5, 3, 3, 5, 3, 6, 5, 4, 6, 2, 3, 3, 5, 4, 4, 3, 4, 8, 7, 9, 3, 4, 3, 7, 2, 7, 9, 9, 2, 4, 9, 10, 4, 9, 6, 7, 8, 3, 7, 6, 3, 6, 4, 9, 1, 4, 4, 3, 3, 7, 9, 4, 3, 4, 3, 4, 4, 2, 5, 6, 3, 10, 1, 3, 1, 8, 3, 4, 1, 7, 2],
    [5, 7, 9, 4, 6, 4, 2, 4, 3, 3, 4, 2, 5, 3, 3, 3, 3, 6, 2, 4, 5, 3, 3, 8, 7, 10, 6, 4, 3, 4, 4, 8, 4, 6, 2, 7, 7, 5, 4, 4, 5, 2, 4, 6, 3, 11, 3, 4, 3, 3, 9, 2, 13, 3, 11, 4, 2, 10, 7, 3, 7, 5, 4, 4, 9, 4, 7, 2, 2, 4, 5, 4, 1, 4, 3, 5, 8, 3, 7, 2, 3, 3, 4, 3, 2, 3, 3, 4, 6, 2, 2, 9, 9, 4, 8, 1, 3, 8, 5, 4],
    [9, 4, 7, 3, 4, 5, 2, 10, 2, 10, 3, 6, 5, 7, 3, 9, 5, 7, 2, 3, 6, 2, 5, 7, 4, 7, 2, 3, 3, 2, 4, 11, 10, 2, 3, 6, 2, 3, 7, 3, 7, 2, 4, 5, 2, 6, 3, 5, 7, 3, 9, 6, 8, 2, 5, 5, 2, 8, 3, 3, 4, 2, 3, 5, 8, 4, 8, 4, 10, 2, 7, 3, 9, 4, 2, 4, 2, 4, 5, 2, 3, 9, 2, 6, 3, 6, 9, 5, 12, 6, 8, 2, 2, 7, 9, 4, 4, 8, 2, 9],
    [3, 4, 2, 3, 3, 5, 2, 5, 9, 8, 2, 3, 4, 8, 2, 6, 5, 9, 5, 3, 7, 3, 11, 4, 3, 6, 2, 3, 4, 2, 2, 9, 8, 3, 5, 5, 2, 1, 5, 10, 2, 12, 6, 4, 6, 2, 6, 2, 5, 6, 8, 2, 3, 8, 2, 8, 2, 11, 4, 2, 7, 3, 5, 4, 12, 6, 7, 3, 10, 6, 9, 2, 10, 3, 5, 7, 8, 3, 12, 2, 3, 4, 4, 3, 11, 2, 8, 3, 5, 2, 4, 4, 4, 5, 2, 7, 3, 3, 4, 3],
    [2, 3, 5, 2, 5, 4, 4, 5, 2, 4, 3, 5, 5, 4, 3, 10, 10, 2, 8, 4, 1, 4, 8, 6, 5, 5, 4, 5, 2, 3, 4, 3, 10, 2, 1, 10, 8, 5, 9, 3, 3, 2, 8, 2, 3, 6, 3, 5, 2, 3, 6, 2, 3, 6, 6, 3, 8, 2, 6, 3, 5, 2, 5, 3, 4, 6, 9, 2, 2, 5, 9, 8, 4, 7, 9, 8, 8, 4, 2, 7, 2, 3, 7, 7, 11, 3, 6, 10, 2, 3, 9, 2, 6, 4, 4, 9, 3, 4, 2, 3],
    [7, 6, 3, 4, 3, 7, 8, 3, 3, 2, 7, 7, 3, 3, 8, 4, 13, 2, 2, 4, 12, 4, 2, 8, 7, 6, 3, 3, 7, 3, 4, 10, 2, 3, 7, 3, 3, 5, 5, 3, 4, 2, 3, 6, 4, 8, 5, 2, 5, 7, 7, 5, 2, 6, 9, 2, 3, 3, 5, 2, 4, 4, 3, 7, 3, 2, 2, 6, 1, 11, 2, 6, 9, 2, 8, 2, 3, 7, 2, 3, 4, 2, 3, 9, 2, 4, 2, 3, 1, 6, 2, 9, 3, 3, 7, 2, 6, 9, 5, 2],
    [7, 9, 4, 3, 4, 1, 2, 4, 1, 5, 10, 5, 5, 2, 5, 7, 6, 3, 7, 9, 2, 4, 2, 3, 5, 6, 4, 1, 4, 5, 2, 12, 3, 9, 1, 6, 5, 2, 8, 3, 5, 9, 4, 9, 2, 2, 4, 3, 4, 4, 1, 2, 4, 7, 2, 4, 3, 2, 3, 5, 5, 7, 5, 9, 4, 8, 2, 3, 5, 2, 3, 4, 2, 3, 6, 2, 4, 5, 4, 9, 2, 4, 3, 2, 5, 2, 9, 5, 1, 2, 1, 10, 2, 5, 7, 3, 7, 9, 6, 4],
    [8, 3, 5, 12, 2, 9, 8, 2, 3, 5, 2, 3, 5, 5, 3, 7, 10, 2, 13, 8, 2, 12, 3, 5, 10, 12, 3, 10, 7, 8, 2, 8, 6, 2, 8, 3, 6, 7, 6, 5, 4, 2, 4, 7, 5, 4, 11, 13, 2, 9, 3, 11, 2, 11, 5, 3, 4, 1, 5, 2, 3, 4, 2, 4, 2, 3, 6, 2, 11, 2, 8, 3, 3, 4, 5, 3, 5, 2, 13, 3, 6, 8, 3, 3, 5, 7, 3, 8, 2, 3, 5, 9, 2, 4, 8, 9, 6, 3, 9, 6],
    [6, 9, 2, 1, 4, 6, 2, 6, 4, 2, 3, 3, 4, 2, 5, 2, 7, 2, 10, 2, 3, 6, 2, 4, 6, 13, 2, 5, 2, 3, 7, 2, 8, 4, 2, 4, 2, 3, 2, 3, 7, 3, 2, 4, 9, 4, 5, 4, 7, 1, 3, 6, 2, 6, 3, 1, 5, 1, 3, 5, 3, 3, 3, 6, 2, 2, 5, 4, 1, 4, 2, 6, 6, 6, 2, 7, 6, 2, 4, 5, 2, 5, 7, 3, 3, 6, 2, 4, 3, 4, 6, 5, 2, 3, 3, 3, 3, 8, 2, 5],
    [8, 8, 2, 1, 14, 2, 8, 12, 2, 2, 5, 2, 12, 2, 5, 2, 5, 4, 1, 10, 2, 11, 2, 3, 8, 2, 7, 5, 3, 9, 3, 5, 5, 7, 5, 3, 11, 8, 2, 3, 7, 2, 3, 5, 5, 2, 6, 7, 3, 1, 5, 4, 8, 5, 2, 8, 8, 3, 2, 3, 4, 4, 2, 7, 5, 3, 2, 1, 4, 2, 4, 3, 4, 2, 5, 4, 5, 2, 1, 8, 4, 6, 7, 2, 3, 6, 2, 3, 7, 6, 3, 10, 8, 2, 3, 6, 5, 8, 2, 7],
    [6, 11, 7, 4, 4, 3, 6, 2, 3, 4, 2, 3, 5, 7, 4, 5, 2, 8, 8, 2, 3, 4, 4, 8, 2, 3, 7, 8, 12, 2, 9, 5, 7, 4, 7, 3, 1, 5, 4, 7, 8, 4, 4, 9, 3, 2, 15, 3, 5, 5, 2, 4, 10, 12, 2, 3, 6, 6, 7, 3, 14, 2, 9, 5, 2, 4, 3, 5, 3, 7, 4, 5, 4, 4, 3, 9, 4, 2, 3, 3, 8, 10, 14, 2, 4, 2, 5, 10, 11, 2, 3, 10, 6, 12, 11, 2, 2, 10, 11, 4],
    [2, 3, 5, 2, 5, 4, 4, 5, 2, 4, 3, 5, 5, 4, 3, 10, 10, 2, 8, 4, 1, 4, 8, 6, 5, 5, 4, 5, 2, 3, 4, 3, 10, 2, 1, 10, 8, 5, 9, 3, 3, 2, 8, 2, 3, 6, 3, 5, 2, 3, 6, 2, 3, 6, 6, 3, 8, 2, 6, 3, 5, 2, 5, 3, 4, 6, 9, 2, 2, 5, 9, 8, 4, 7, 9, 8, 8, 4, 2, 7, 2, 3, 7, 7, 11, 3, 6, 10, 2, 3, 9, 2, 6, 4, 4, 9, 3, 4, 2, 3],
    [3, 6, 2, 8, 13, 4, 3, 9, 2, 4, 2, 1, 5, 11, 3, 4, 3, 3, 9, 1, 6, 4, 3, 4, 5, 8, 2, 4, 5, 3, 7, 11, 3, 4, 4, 4, 2, 6, 3, 11, 7, 4, 13, 2, 5, 3, 4, 4, 2, 9, 1, 7, 2, 1, 7, 8, 7, 2, 5, 2, 4, 3, 9, 10, 2, 6, 2, 4, 5, 2, 2, 12, 8, 5, 2, 5, 2, 5, 2, 2, 2, 1, 6, 2, 1, 3, 5, 3, 7, 11, 5, 8, 2, 1, 10, 11, 2, 1, 6, 2],
    [8, 2, 2, 2, 4, 3, 2, 10, 7, 4, 5, 7, 1, 1, 3, 6, 7, 4, 2, 3, 11, 3, 4, 7, 1, 1, 3, 5, 4, 3, 8, 7, 4, 2, 3, 4, 6, 6, 4, 3, 6, 4, 11, 1, 4, 2, 5, 2, 5, 2, 7, 3, 5, 3, 5, 3, 4, 5, 2, 1, 4, 8, 2, 1, 6, 1, 4, 5, 2, 2, 4, 1, 1, 5, 11, 4, 3, 5, 7, 6, 6, 6, 2, 1, 6, 1, 7, 3, 4, 4, 4, 4, 8, 7, 8, 4, 6, 2, 4, 3],
    [5, 7, 8, 4, 1, 4, 6, 6, 7, 2, 5, 6, 5, 2, 2, 2, 3, 3, 9, 1, 5, 3, 4, 2, 2, 3, 4, 2, 4, 4, 4, 2, 5, 3, 1, 1, 6, 3, 1, 2, 1, 1, 3, 2, 3, 1, 4, 3, 6, 2, 2, 5, 3, 5, 5, 5, 3, 1, 2, 2, 4, 3, 5, 4, 3, 1, 2, 3, 2, 2, 2, 6, 1, 2, 7, 4, 2, 7, 8, 5, 8, 3, 2, 1, 5, 3, 2, 3, 3, 5, 5, 9, 3, 1, 3, 7, 2, 2, 7, 2],
    [5, 7, 4, 7, 4, 1, 5, 4, 4, 2, 3, 8, 2, 8, 2, 3, 6, 3, 1, 7, 4, 7, 6, 3, 3, 2, 3, 4, 4, 1, 4, 4, 2, 8, 5, 5, 3, 4, 4, 2, 3, 4, 3, 2, 1, 4, 4, 3, 6, 2, 4, 3, 7, 3, 5, 2, 4, 1, 2, 4, 4, 2, 5, 5, 3, 3, 4, 3, 4, 3, 4, 4, 2, 3, 3, 2, 1, 5, 4, 5, 3, 6, 7, 2, 3, 3, 3, 3, 6, 3, 1, 4, 3, 4, 3, 6, 5, 6, 3, 3],
    [8, 2, 2, 2, 4, 4, 1, 4, 4, 5, 1, 4, 1, 2, 8, 3, 3, 4, 1, 1, 6, 2, 6, 2, 3, 5, 4, 1, 3, 2, 4, 4, 2, 6, 6, 3, 7, 5, 4, 3, 2, 4, 1, 2, 6, 4, 2, 5, 5, 9, 3, 4, 3, 1, 3, 3, 5, 2, 5, 1, 4, 2, 5, 1, 5, 3, 4, 2, 3, 3, 3, 3, 8, 1, 2, 3, 7, 6, 3, 5, 2, 2, 3, 2, 3, 5, 4, 5, 1, 1, 5, 4, 7, 2, 3, 2, 5, 2, 10, 4],
    [8, 2, 2, 2, 9, 9, 3, 3, 3, 9, 1, 2, 8, 1, 1, 8, 6, 6, 4, 5, 3, 8, 2, 3, 6, 6, 5, 2, 3, 6, 6, 5, 11, 8, 3, 9, 5, 3, 3, 2, 3, 4, 4, 2, 1, 3, 4, 1, 2, 2, 3, 8, 9, 3, 7, 4, 4, 4, 3, 8, 9, 6, 3, 1, 8, 3, 9, 4, 6, 4, 2, 4, 7, 3, 6, 3, 4, 6, 6, 8, 4, 4, 4, 3, 5, 4, 5, 8, 6, 5, 4, 4, 2, 3, 4, 3, 7, 4, 1, 1],
    [8, 2, 2, 2, 5, 4, 5, 2, 3, 8, 7, 1, 2, 4, 2, 7, 9, 10, 6, 10, 4, 5, 2, 3, 5, 2, 3, 8, 4, 4, 2, 4, 2, 4, 7, 8, 2, 4, 4, 2, 3, 5, 7, 6, 7, 2, 1, 5, 2, 2, 3, 3, 10, 3, 2, 2, 2, 2, 1, 3, 4, 1, 4, 4, 9, 2, 2, 6, 4, 4, 2, 8, 3, 5, 1, 4, 5, 7, 3, 5, 2, 5, 3, 4, 3, 2, 11, 2, 8, 3, 5, 1, 4, 5, 7, 3, 5, 5, 3, 4],
    [8, 2, 2, 2, 4, 11, 4, 11, 3, 3, 9, 10, 3, 5, 3, 6, 6, 2, 3, 3, 8, 4, 3, 2, 8, 3, 3, 3, 5, 2, 8, 2, 9, 3, 4, 3, 3, 2, 2, 9, 2, 3, 3, 8, 3, 3, 7, 2, 5, 4, 2, 6, 5, 7, 8, 4, 5, 4, 2, 4, 7, 9, 2, 3, 6, 5, 4, 3, 7, 5, 7, 8, 3, 3, 1, 7, 2, 4, 4, 2, 3, 3, 4, 3, 3, 3, 6, 5, 4, 2, 6, 4, 2, 7, 3, 6, 1, 7, 3, 3],
    [5, 7, 3, 14, 2, 2, 4, 3, 1, 3, 1, 11, 7, 2, 6, 4, 4, 1, 2, 2, 6, 7, 5, 3, 6, 1, 2, 9, 2, 4, 4, 3, 3, 5, 3, 3, 6, 3, 3, 10, 11, 4, 2, 1, 7, 1, 1, 4, 2, 6, 2, 1, 7, 3, 10, 11, 6, 3, 3, 5, 1, 2, 7, 1, 6, 4, 1, 2, 9, 5, 3, 3, 8, 2, 4, 5, 2, 3, 1, 3, 2, 2, 8, 2, 4, 6, 1, 2, 3, 3, 3, 1, 2, 1, 3, 2, 1, 3, 3, 3],
    [8, 2, 2, 2, 3, 3, 7, 2, 5, 6, 2, 5, 5, 8, 9, 4, 4, 8, 2, 3, 5, 14, 1, 4, 8, 3, 2, 7, 5, 3, 8, 3, 8, 9, 4, 8, 2, 1, 7, 4, 3, 3, 6, 4, 4, 4, 5, 6, 3, 5, 4, 7, 3, 5, 2, 4, 4, 4, 3, 4, 2, 11, 1, 4, 2, 5, 4, 3, 2, 2, 2, 3, 7, 6, 3, 1, 6, 1, 4, 4, 5, 2, 1, 2, 2, 5, 2, 3, 4, 4, 3, 4, 3, 1, 7, 3, 2, 1, 4, 3],
    [5, 7, 3, 4, 3, 3, 3, 1, 1, 4, 3, 2, 1, 1, 4, 3, 6, 7, 4, 3, 3, 2, 4, 5, 2, 1, 1, 3, 3, 2, 2, 7, 3, 4, 6, 3, 2, 1, 3, 3, 3, 4, 4, 4, 3, 2, 4, 5, 2, 2, 2, 4, 1, 3, 5, 2, 3, 6, 4, 1, 3, 3, 5, 4, 2, 4, 4, 2, 3, 2, 1, 1, 5, 1, 3, 4, 4, 7, 3, 10, 2, 4, 2, 3, 3, 2, 3, 2, 3, 6, 2, 1, 4, 2, 3, 3, 3, 4, 6, 3],
    [5, 7, 3, 1, 2, 1, 5, 3, 4, 2, 1, 2, 11, 1, 1, 2, 2, 6, 7, 4, 5, 6, 8, 7, 10, 4, 4, 3, 3, 3, 6, 2, 3, 4, 2, 5, 2, 4, 2, 7, 4, 4, 10, 2, 7, 2, 5, 3, 4, 3, 8, 1, 3, 3, 2, 4, 6, 5, 5, 3, 3, 2, 4, 4, 7, 7, 2, 3, 3, 6, 4, 8, 3, 10, 4, 10, 1, 8, 2, 5, 3, 5, 3, 4, 4, 4, 4, 6, 9, 5, 6, 4, 2, 4, 4, 3, 4, 3, 7, 2],
    [2, 4, 3, 4, 1, 2, 3, 2, 2, 5, 9, 7, 2, 5, 2, 3, 3, 3, 1, 3, 2, 3, 2, 5, 1, 1, 9, 3, 5, 7, 2, 3, 3, 5, 3, 1, 6, 4, 9, 10, 9, 8, 2, 5, 3, 2, 5, 2, 10, 4, 3, 5, 5, 3, 4, 7, 1, 2, 4, 5, 2, 6, 2, 7, 1, 4, 10, 6, 2, 10, 3, 2, 4, 2, 3, 2, 4, 9, 2, 3, 4, 6, 8, 3, 5, 2, 8, 2, 3, 10, 2, 7, 5, 4, 7, 3, 4, 7, 3, 8],
    [2, 5, 7, 6, 3, 3, 7, 7, 6, 5, 7, 4, 3, 4, 4, 4, 2, 7, 3, 10, 6, 7, 2, 4, 4, 4, 7, 4, 6, 4, 3, 7, 4, 4, 2, 3, 4, 4, 3, 5, 7, 8, 4, 3, 3, 6, 3, 10, 6, 2, 3, 4, 1, 4, 5, 2, 4, 4, 7, 4, 8, 3, 8, 6, 4, 3, 5, 3, 5, 5, 3, 4, 6, 3, 10, 4, 3, 4, 2, 3, 5, 2, 2, 4, 4, 3, 6, 5, 4, 3, 5, 4, 2, 5, 2, 4, 2, 3, 5, 5],
    [2, 2, 4, 4, 2, 7, 3, 1, 4, 2, 2, 3, 3, 1, 5, 1, 3, 2, 4, 3, 5, 3, 2, 6, 2, 2, 3, 2, 9, 2, 6, 5, 3, 1, 3, 4, 4, 7, 2, 4, 4, 3, 7, 2, 3, 10, 4, 6, 2, 3, 2, 4, 4, 5, 1, 6, 1, 5, 2, 3, 4, 5, 2, 5, 2, 3, 7, 5, 4, 4, 5, 4, 4, 3, 6, 3, 4, 2, 4, 4, 1, 4, 3, 2, 4, 4, 5, 1, 4, 5, 4, 2, 4, 2, 5, 4, 2, 2, 5, 4],
    [2, 1, 7, 4, 7, 3, 3, 4, 11, 4, 2, 3, 3, 8, 4, 2, 6, 7, 2, 3, 4, 2, 3, 6, 2, 7, 2, 4, 2, 4, 3, 2, 4, 3, 3, 6, 4, 4, 3, 6, 2, 4, 3, 5, 3, 7, 5, 1, 4, 4, 6, 12, 2, 3, 5, 4, 4, 1, 5, 10, 5, 2, 4, 4, 4, 4, 4, 4, 2, 3, 10, 5, 4, 3, 2, 5, 1, 6, 4, 3, 3, 4, 2, 2, 11, 3, 3, 5, 3, 10, 6, 7, 2, 6, 4, 3, 6, 3, 6, 4],
    [2, 3, 10, 5, 4, 3, 9, 2, 2, 3, 2, 3, 3, 4, 7, 5, 3, 3, 3, 2, 4, 10, 3, 6, 2, 3, 4, 4, 3, 3, 3, 5, 4, 4, 3, 4, 4, 2, 3, 4, 3, 6, 4, 3, 5, 6, 3, 4, 6, 2, 6, 5, 7, 2, 1, 7, 9, 3, 5, 4, 4, 2, 9, 7, 2, 4, 2, 4, 5, 4, 4, 7, 9, 7, 1, 5, 4, 3, 4, 7, 2, 5, 4, 4, 3, 10, 7, 4, 5, 8, 7, 2, 2, 11, 8, 3, 5, 4, 8, 7],
    [3, 10, 6, 2, 2, 3, 4, 1, 7, 8, 12, 2, 3, 4, 3, 7, 3, 5, 4, 6, 3, 3, 3, 3, 5, 2, 3, 7, 3, 10, 2, 4, 3, 4, 4, 8, 2, 3, 7, 2, 3, 4, 4, 3, 5, 3, 3, 2, 5, 4, 6, 4, 2, 3, 5, 3, 10, 4, 8, 3, 6, 2, 3, 7, 4, 2, 3, 9, 4, 5, 2, 3, 6, 4, 10, 8, 1, 4, 5, 4, 4, 3, 2, 3, 10, 5, 3, 3, 2, 5, 6, 3, 5, 4, 3, 6, 3, 8, 2, 10],
    [6, 2, 2, 3, 6, 1, 5, 3, 3, 5, 4, 8, 4, 3, 5, 4, 3, 4, 4, 5, 4, 7, 5, 2, 6, 3, 4, 5, 7, 8, 3, 2, 4, 3, 3, 4, 4, 8, 6, 3, 9, 2, 5, 2, 4, 4, 9, 15, 3, 7, 4, 4, 2, 5, 9, 3, 7, 2, 3, 9, 3, 6, 4, 5, 2, 1, 7, 4, 5, 9, 3, 7, 9, 3, 3, 4, 5, 4, 3, 3, 3, 6, 5, 2, 4, 3, 5, 2, 3, 7, 5, 4, 3, 2, 3, 7, 4, 3, 6, 2],
    [2, 1, 8, 4, 8, 10, 3, 4, 2, 1, 5, 2, 4, 3, 3, 4, 7, 3, 5, 3, 7, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 10, 5, 4, 5, 4, 7, 5, 4, 1, 2, 5, 4, 2, 2, 3, 3, 5, 3, 5, 4, 2, 5, 3, 4, 5, 5, 3, 1, 3, 3, 4, 3, 6, 3, 3, 3, 6, 2, 4, 3, 3, 4, 3, 10, 11, 11, 3, 6, 3, 2, 4, 2, 3, 3, 6, 3, 4, 4, 2, 5, 7, 4, 6, 3, 9, 2, 4],
    [3, 7, 5, 2, 8, 2, 6, 3, 4, 4, 3, 4, 5, 2, 3, 5, 4, 4, 5, 3, 9, 2, 2, 2, 6, 2, 3, 2, 2, 3, 10, 4, 2, 3, 2, 3, 6, 4, 3, 3, 5, 6, 9, 3, 4, 3, 7, 3, 11, 11, 7, 5, 5, 3, 2, 6, 3, 9, 7, 2, 3, 5, 2, 4, 3, 7, 3, 2, 3, 9, 2, 3, 6, 2, 9, 7, 7, 1, 4, 6, 4, 4, 3, 9, 2, 4, 1, 10, 7, 6, 3, 2, 7, 6, 2, 7, 4, 7, 2, 10],
    [5, 8, 7, 3, 3, 2, 7, 4, 2, 11, 8, 3, 6, 2, 4, 7, 6, 3, 8, 2, 3, 4, 2, 2, 3, 3, 4, 3, 4, 2, 2, 3, 3, 5, 2, 4, 3, 8, 4, 3, 3, 3, 10, 3, 4, 3, 4, 2, 3, 5, 3, 3, 2, 4, 6, 10, 4, 1, 6, 2, 5, 2, 4, 3, 4, 3, 4, 5, 4, 3, 3, 3, 4, 6, 1, 3, 2, 4, 4, 5, 4, 8, 3, 10, 3, 3, 11, 3, 1, 6, 7, 3, 8, 2, 7, 7, 6, 5, 4, 3],
    [2, 5, 3, 4, 2, 3, 6, 5, 7, 4, 7, 5, 4, 6, 4, 5, 5, 2, 5, 2, 4, 8, 4, 3, 1, 3, 5, 1, 4, 4, 2, 4, 9, 6, 2, 1, 7, 4, 5, 7, 4, 5, 3, 5, 4, 5, 4, 9, 3, 7, 3, 3, 5, 11, 1, 5, 2, 4, 1, 3, 7, 7, 2, 4, 3, 3, 4, 4, 10, 4, 3, 5, 5, 2, 7, 4, 5, 10, 3, 7, 8, 4, 6, 1, 5, 5, 2, 1, 7, 2, 1, 3, 3, 3, 9, 3, 1, 3, 1, 4],
    [1, 7, 1, 4, 7, 4, 7, 5, 7, 7, 2, 8, 5, 8, 2, 7, 3, 2, 4, 3, 8, 2, 3, 4, 2, 7, 3, 5, 2, 4, 3, 6, 4, 5, 2, 7, 3, 7, 4, 5, 3, 1, 3, 7, 2, 4, 2, 3, 3, 3, 2, 3, 7, 2, 3, 4, 3, 4, 6, 10, 8, 3, 6, 4, 4, 3, 3, 10, 3, 6, 2, 6, 3, 3, 7, 2, 3, 4, 6, 3, 5, 3, 3, 10, 6, 3, 4, 6, 5, 9, 2, 3, 4, 5, 2, 3, 3, 4, 3, 3],
    [1, 4, 3, 5, 3, 7, 5, 6, 4, 5, 4, 5, 3, 4, 4, 1, 5, 3, 4, 1, 3, 4, 2, 5, 2, 3, 1, 3, 6, 1, 3, 1, 4, 1, 8, 2, 2, 5, 1, 9, 1, 9, 4, 4, 2, 3, 6, 5, 2, 3, 3, 1, 4, 4, 3, 8, 6, 4, 6, 2, 4, 5, 2, 3, 2, 3, 9, 4, 5, 2, 2, 4, 3, 4, 6, 5, 4, 3, 2, 3, 3, 7, 4, 3, 6, 7, 2, 4, 4, 6, 3, 6, 4, 4, 4, 2, 3, 5, 4, 7],
    [2, 3, 2, 4, 4, 6, 4, 2, 3, 8, 4, 6, 2, 2, 7, 3, 2, 4, 1, 5, 3, 5, 4, 3, 3, 3, 4, 3, 5, 2, 3, 7, 8, 10, 1, 5, 4, 10, 6, 4, 1, 7, 6, 4, 3, 8, 4, 5, 8, 8, 6, 3, 1, 5, 5, 6, 2, 1, 5, 3, 4, 3, 1, 5, 10, 2, 3, 5, 4, 4, 2, 4, 4, 6, 1, 2, 4, 5, 4, 7, 5, 3, 7, 4, 5, 7, 2, 4, 5, 3, 1, 4, 4, 2, 6, 6, 2, 7, 3, 7],
    [9, 2, 3, 8, 2, 6, 3, 4, 3, 5, 5, 6, 2, 5, 3, 4, 7, 6, 4, 9, 1, 5, 6, 8, 1, 1, 7, 3, 5, 5, 2, 3, 5, 2, 6, 8, 3, 4, 2, 4, 2, 4, 3, 1, 4, 3, 8, 2, 3, 4, 3, 3, 6, 3, 6, 4, 9, 6, 3, 1, 4, 6, 4, 2, 4, 2, 7, 7, 6, 6, 3, 5, 3, 2, 2, 9, 2, 3, 3, 4, 4, 2, 3, 4, 4, 1, 7, 4, 4, 7, 2, 6, 3, 1, 5, 1, 3, 5, 2, 3],
    [2, 9, 7, 3, 2, 9, 1, 7, 1, 3, 4, 5, 6, 1, 3, 5, 6, 2, 4, 1, 12, 4, 5, 7, 1, 12, 3, 3, 5, 4, 4, 5, 3, 2, 6, 3, 3, 7, 4, 6, 4, 2, 5, 3, 3, 6, 3, 3, 4, 2, 4, 6, 4, 3, 5, 7, 4, 3, 5, 1, 6, 4, 2, 3, 4, 4, 3, 3, 1, 4, 7, 5, 4, 7, 1, 12, 3, 3, 2, 3, 4, 6, 5, 4, 5, 4, 4, 8, 6, 3, 6, 5, 4, 3, 8, 6, 3, 4, 7, 1],
    [7, 2, 12, 8, 5, 1, 3, 4, 4, 2, 3, 3, 8, 4, 12, 9, 7, 1, 3, 3, 3, 1, 6, 5, 4, 3, 4, 4, 7, 3, 3, 7, 4, 4, 2, 4, 3, 7, 5, 3, 3, 4, 4, 4, 2, 3, 5, 5, 4, 5, 3, 3, 3, 5, 8, 3, 2, 6, 6, 4, 2, 3, 4, 3, 8, 4, 7, 5, 4, 3, 1, 8, 5, 2, 4, 2, 6, 4, 3, 7, 7, 3, 1, 7, 8, 4, 4, 9, 7, 4, 5, 3, 4, 5, 10, 5, 3, 10, 3, 1],
    [8, 2, 4, 5, 7, 4, 7, 8, 2, 2, 3, 10, 2, 3, 5, 4, 4, 1, 6, 5, 3, 4, 5, 3, 6, 6, 4, 2, 5, 8, 9, 3, 6, 4, 3, 3, 4, 4, 5, 3, 4, 5, 6, 3, 3, 6, 7, 2, 5, 4, 3, 6, 4, 2, 4, 4, 4, 1, 8, 2, 7, 3, 4, 2, 1, 6, 4, 5, 2, 2, 3, 7, 3, 4, 3, 4, 1, 5, 5, 6, 1, 5, 5, 7, 3, 1, 3, 6, 2, 10, 8, 7, 3, 5, 2, 2, 4, 5, 2, 2],
    [1, 3, 5, 2, 4, 3, 2, 7, 2, 2, 6, 3, 2, 3, 10, 4, 3, 4, 3, 5, 4, 2, 2, 5, 4, 3, 5, 4, 3, 1, 3, 5, 2, 1, 3, 6, 3, 9, 2, 7, 6, 8, 5, 4, 6, 5, 3, 4, 3, 6, 2, 8, 1, 5, 4, 2, 2, 2, 5, 3, 3, 8, 7, 8, 4, 3, 3, 3, 5, 1, 3, 3, 2, 2, 4, 5, 10, 4, 3, 6, 4, 1, 3, 8, 2, 4, 4, 3, 7, 4, 2, 2, 4, 2, 5, 1, 4, 6, 3, 2],
    [7, 5, 2, 9, 3, 7, 3, 7, 4, 2, 3, 4, 1, 3, 3, 4, 3, 5, 1, 4, 5, 5, 9, 4, 5, 4, 2, 3, 5, 2, 3, 7, 4, 4, 3, 8, 4, 2, 3, 4, 3, 4, 4, 4, 3, 3, 3, 1, 3, 9, 4, 2, 3, 6, 3, 3, 2, 4, 4, 4, 3, 4, 2, 4, 5, 3, 5, 3, 4, 3, 3, 6, 3, 3, 4, 3, 4, 3, 4, 2, 3, 2, 4, 3, 6, 2, 3, 5, 2, 1, 7, 3, 3, 6, 4, 2, 4, 2, 5, 6],
    [11, 2, 7, 5, 4, 2, 4, 2, 3, 5, 6, 2, 2, 4, 1, 5, 5, 2, 4, 7, 6, 2, 2, 6, 2, 2, 10, 2, 2, 1, 4, 3, 2, 2, 4, 3, 4, 2, 5, 2, 2, 1, 4, 7, 4, 3, 2, 3, 6, 2, 3, 5, 3, 4, 2, 3, 3, 3, 7, 3, 6, 4, 2, 2, 6, 2, 3, 5, 2, 2, 8, 3, 2, 3, 4, 2, 6, 3, 4, 7, 2, 2, 6, 3, 2, 4, 3, 8, 3, 4, 3, 3, 4, 4, 10, 4, 2, 5, 3, 8],
    [5, 3, 4, 3, 2, 4, 4, 8, 3, 1, 7, 4, 3, 4, 1, 7, 7, 4, 3, 7, 2, 4, 7, 6, 1, 6, 2, 8, 2, 4, 2, 3, 3, 3, 3, 9, 2, 2, 4, 4, 4, 6, 6, 6, 4, 6, 3, 11, 3, 7, 7, 8, 3, 7, 2, 5, 6, 6, 2, 3, 2, 4, 3, 7, 4, 4, 6, 2, 5, 2, 5, 3, 5, 4, 2, 4, 2, 4, 3, 3, 3, 4, 4, 4, 6, 1, 6, 3, 4, 4, 8, 3, 3, 3, 7, 4, 1, 5, 3, 2],
    [3, 7, 7, 2, 2, 7, 3, 3, 3, 4, 4, 4, 9, 4, 3, 7, 4, 3, 3, 4, 9, 3, 1, 9, 2, 2, 4, 7, 2, 4, 3, 6, 2, 3, 5, 7, 9, 4, 3, 4, 2, 3, 4, 3, 5, 3, 5, 4, 3, 6, 1, 3, 4, 3, 5, 4, 5, 3, 6, 2, 3, 4, 4, 4, 4, 5, 4, 1, 7, 3, 9, 6, 6, 3, 4, 4, 4, 2, 4, 5, 2, 3, 4, 2, 1, 8, 4, 2, 1, 4, 3, 4, 6, 1, 4, 3, 6, 3, 8, 3], 
    [3, 3, 6, 2, 7, 1, 5, 4, 7, 2, 6, 4, 3, 1, 6, 4, 2, 3, 2, 9, 2, 5, 3, 3, 6, 5, 2, 3, 3, 2, 3, 6, 3, 6, 2, 8, 3, 2, 1, 4, 5, 3, 2, 3, 8, 2, 3, 1, 4, 3, 4, 4, 6, 2, 7, 1, 3, 1, 4, 3, 1, 5, 3, 2, 5, 4, 1, 6, 4, 2, 6, 2, 3, 5, 4, 7, 2, 4, 4, 4, 6, 5, 2, 4, 8, 1, 3, 3, 4, 6, 2, 5, 3, 5, 1, 4, 4, 3, 7, 6],
    [3, 7, 4, 3, 4, 4, 3, 2, 2, 4, 6, 2, 4, 2, 3, 3, 3, 3, 6, 2, 3, 6, 3, 1, 9, 5, 1, 6, 2, 3, 2, 3, 1, 7, 4, 2, 8, 3, 5, 2, 5, 4, 4, 3, 3, 2, 5, 6, 8, 2, 4, 2, 5, 1, 5, 3, 4, 3, 8, 3, 4, 3, 5, 1, 4, 4, 3, 5, 7, 4, 2, 3, 3, 3, 5, 2, 3, 2, 4, 4, 4, 2, 8, 3, 3, 7, 3, 11, 6, 7, 2, 7, 6, 3, 5, 4, 4, 3, 2, 3],
    [4, 6, 2, 6, 5, 2, 6, 7, 4, 2, 1, 4, 7, 4, 3, 1, 3, 4, 4, 2, 10, 2, 6, 2, 3, 2, 5, 7, 2, 5, 5, 3, 4, 3, 2, 4, 2, 5, 3, 4, 2, 2, 5, 6, 2, 3, 1, 8, 4, 1, 7, 7, 5, 6, 4, 4, 7, 3, 3, 8, 3, 5, 2, 4, 3, 4, 3, 7, 2, 3, 5, 2, 7, 2, 10, 2, 4, 2, 2, 1, 4, 5, 2, 4, 3, 4, 3, 7, 4, 4, 3, 5, 3, 4, 3, 6, 2, 2, 4, 3], 
    [8, 6, 5, 3, 5, 4, 6, 3, 3, 6, 3, 5, 3, 3, 3, 4, 3, 3, 3, 3, 3, 7, 4, 5, 2, 3, 5, 9, 4, 5, 3, 4, 4, 3, 3, 3, 4, 4, 6, 3, 3, 5, 3, 2, 3, 3, 3, 10, 7, 2, 5, 2, 4, 4, 2, 7, 1, 3, 1, 4, 4, 2, 4, 2, 1, 4, 2, 4, 3, 4, 4, 7, 3, 5, 4, 7, 6, 5, 3, 5, 3, 5, 4, 6, 2, 1, 4, 7, 4, 3, 4, 3, 2, 4, 2, 1, 7, 5, 2, 3],
    [4, 6, 2, 6, 3, 5, 4, 5, 4, 1, 7, 2, 3, 7, 4, 4, 4, 7, 6, 3, 9, 2, 3, 5, 4, 4, 2, 2, 3, 4, 3, 4, 1, 6, 6, 3, 2, 6, 4, 4, 3, 7, 3, 2, 4, 3, 3, 4, 3, 4, 4, 5, 3, 5, 3, 3, 4, 1, 4, 6, 4, 2, 3, 5, 1, 5, 3, 1, 5, 3, 1, 6, 9, 3, 8, 3, 3, 3, 3, 4, 1, 6, 3, 3, 8, 2, 3, 3, 3, 3, 5, 2, 3, 6, 2, 3, 3, 2, 3, 5],
    [8, 6, 5, 4, 4, 3, 3, 1, 8, 5, 4, 10, 3, 4, 4, 3, 3, 2, 7, 2, 3, 5, 4, 4, 3, 4, 3, 2, 10, 3, 4, 3, 4, 2, 6, 3, 4, 5, 2, 4, 3, 3, 4, 5, 3, 5, 3, 5, 3, 3, 4, 5, 2, 2, 4, 1, 5, 5, 2, 3, 4, 3, 2, 2, 4, 5, 2, 3, 3, 3, 4, 3, 4, 4, 3, 3, 7, 2, 3, 3, 4, 4, 1, 1, 7, 1, 10, 3, 4, 9, 2, 7, 3, 3, 4, 2, 3, 3, 6, 2],
    [8, 6, 2, 3, 3, 3, 2, 4, 5, 3, 7, 3, 3, 1, 5, 5, 5, 3, 4, 2, 2, 6, 4, 3, 4, 2, 3, 3, 4, 4, 7, 6, 4, 4, 2, 2, 3, 3, 2, 3, 4, 3, 5, 3, 5, 4, 7, 5, 6, 6, 7, 5, 2, 1, 4, 4, 1, 4, 2, 10, 5, 2, 2, 3, 4, 2, 4, 3, 3, 5, 7, 3, 3, 3, 4, 6, 4, 6, 2, 3, 4, 3, 3, 3, 8, 2, 6, 3, 2, 5, 3, 2, 3, 7, 3, 7, 2, 4, 2, 3],
    [4, 6, 2, 6, 7, 4, 4, 2, 5, 4, 3, 4, 2, 2, 3, 6, 5, 2, 3, 4, 2, 4, 4, 4, 7, 4, 9, 4, 6, 4, 4, 3, 3, 4, 4, 2, 3, 7, 3, 2, 4, 3, 3, 10, 5, 4, 6, 6, 4, 5, 4, 2, 3, 4, 4, 3, 8, 2, 4, 8, 4, 4, 7, 7, 2, 7, 3, 6, 4, 7, 3, 3, 2, 5, 3, 3, 4, 2, 4, 3, 3, 8, 7, 2, 2, 4, 3, 4, 5, 4, 2, 3, 1, 5, 2, 4, 2, 4, 2, 4],
    [8, 6, 4, 4, 1, 5, 4, 4, 2, 5, 6, 4, 3, 3, 1, 3, 3, 5, 5, 5, 3, 5, 3, 3, 2, 6, 4, 3, 4, 4, 3, 6, 7, 2, 3, 4, 3, 4, 3, 4, 2, 5, 3, 7, 2, 1, 3, 2, 4, 4, 3, 3, 2, 6, 3, 4, 4, 3, 7, 3, 2, 3, 3, 6, 8, 2, 5, 2, 7, 1, 6, 4, 3, 6, 7, 7, 2, 4, 4, 4, 3, 3, 3, 4, 1, 6, 4, 1, 3, 6, 2, 3, 5, 5, 1, 3, 4, 5, 2, 5], 
    [4, 6, 2, 6, 6, 3, 4, 3, 10, 3, 4, 3, 3, 3, 2, 4, 5, 3, 11, 3, 5, 3, 6, 2, 4, 5, 5, 3, 5, 6, 9, 6, 10, 3, 4, 3, 9, 5, 5, 2, 2, 4, 7, 2, 3, 9, 3, 4, 3, 3, 7, 2, 2, 7, 6, 2, 3, 4, 5, 1, 5, 3, 6, 4, 3, 5, 2, 3, 4, 3, 1, 6, 2, 3, 3, 6, 4, 4, 5, 3, 8, 3, 1, 4, 8, 4, 6, 4, 3, 3, 4, 7, 9, 3, 3, 7, 4, 4, 3, 1], 
    [8, 6, 3, 4, 4, 4, 3, 4, 2, 3, 2, 3, 7, 2, 5, 6, 7, 4, 3, 4, 2, 2, 3, 5, 5, 5, 3, 2, 3, 3, 4, 3, 6, 2, 5, 3, 3, 4, 3, 8, 2, 3, 8, 5, 3, 3, 4, 6, 2, 7, 2, 6, 3, 5, 4, 8, 2, 4, 1, 5, 4, 5, 4, 3, 5, 3, 7, 2, 5, 4, 6, 3, 6, 4, 2, 4, 5, 3, 1, 8, 4, 1, 8, 6, 3, 3, 1, 5, 3, 2, 5, 3, 7, 3, 3, 8, 6, 3, 1, 3],
])
true_classes = np.array([2, 3, 2, 3, 4, 2, 2, 1, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 3, 4, 3, 1, 3, 3, 1, 1, 1, 2, 3, 3, 2, 3, 1, 1, 2, 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1])

# Initialize variables
num_neurons_layer1 = 6
num_neurons_layer2 = 5
learning_rate = 0.01
num_epochs = 1000  # Number of training epochs

# Initialize weights
weights_layer1 = 0.10 * np.random.randn(input_data.shape[1], num_neurons_layer1)
weights_layer2 = 0.10 * np.random.randn(num_neurons_layer1, num_neurons_layer2)

# Training loop
for epoch in range(num_epochs):
    total_loss = 0
    for batch_input, batch_true_class in zip(input_data, true_classes):
        # Forward pass
        layer1_neurons = np.dot(batch_input, weights_layer1)
        activated_layer1 = np.maximum(0, layer1_neurons)
        activated_layer1 = activated_layer1.reshape((1, -1))
        layer2_neurons = np.dot(activated_layer1, weights_layer2)
        output = softmax(layer2_neurons)

        # Compute loss
        y_true = np.zeros(num_neurons_layer2)
        y_true[batch_true_class] = 1
        loss = categorical_cross_entropy(y_true, output)
        total_loss += loss

        # Backpropagation
        output_error = output - y_true
        weights_layer2_gradient = np.dot(activated_layer1.T, output_error)
        layer1_error = np.dot(output_error, weights_layer2.T)
        layer1_gradient = layer1_error * relu_derivative(layer1_neurons)
        weights_layer1_gradient = np.dot(batch_input.reshape(-1, 1), layer1_gradient.reshape(1, -1))

        # Update weights
        weights_layer1 -= learning_rate * weights_layer1_gradient
        weights_layer2 -= learning_rate * weights_layer2_gradient

    # Print average loss for the epoch
    avg_loss = total_loss / len(true_classes)
    print("Epoch:", epoch + 1, "  Loss:", avg_loss)

# Print final output probabilities and loss
print("\nFinal Output Probabilities:")
for i, batch_input in enumerate(input_data):
    layer1_neurons = np.dot(batch_input, weights_layer1)
    activated_layer1 = np.maximum(0, layer1_neurons)
    activated_layer1 = activated_layer1.reshape((1, -1))
    layer2_neurons = np.dot(activated_layer1, weights_layer2)
    output = softmax(layer2_neurons)
    print("Batch", i+1, ":", output)

print("\nFinal Average Categorical Cross-Entropy Loss:", avg_loss)


# Define your test dataset
test_input_data = np.array([[11, 4, 6, 3, 7, 3, 5, 6, 9, 2, 3, 3, 4, 2, 5, 4, 2, 4, 4, 2, 6, 10, 3, 5, 2, 4, 4, 3, 5, 6, 8, 5, 8, 2, 7, 1, 8, 2, 5, 8, 4, 3, 8, 2, 3, 5, 4, 4, 1, 6, 6, 7, 1, 12, 2, 1, 6, 3, 9, 4, 2, 3, 5, 2, 3, 5, 3, 11, 6, 2, 3, 3, 6, 5, 2, 1, 5, 2, 1, 5, 2, 3, 5, 5, 2, 9, 2, 5, 2, 7, 2, 1, 8, 2, 4, 7, 3, 4, 9, 5],
                           [7, 9, 4, 3, 4, 1, 2, 4, 1, 5, 10, 5, 5, 2, 5, 7, 6, 3, 7, 9, 2, 4, 2, 3, 5, 6, 4, 1, 4, 5, 2, 12, 3, 9, 1, 6, 5, 2, 8, 3, 5, 9, 4, 9, 2, 2, 4, 3, 4, 4, 1, 2, 4, 7, 2, 4, 3, 2, 3, 5, 5, 7, 5, 9, 4, 8, 2, 3, 5, 2, 3, 4, 2, 3, 6, 2, 4, 5, 4, 9, 2, 4, 3, 2, 5, 2, 9, 5, 1, 2, 1, 10, 2, 5, 7, 3, 7, 9, 6, 4]])

test_true_classes = np.array([4, 4])

# Test loop
for i, (test_input, test_true_class) in enumerate(zip(test_input_data, test_true_classes)):
    # Forward pass
    layer1_neurons = np.dot(test_input, weights_layer1)
    activated_layer1 = np.maximum(0, layer1_neurons)
    activated_layer1 = activated_layer1.reshape((1, -1))
    layer2_neurons = np.dot(activated_layer1, weights_layer2)
    output = softmax(layer2_neurons)
    
    # Get predicted class
    predicted_class = np.argmax(output)

    # Print results
    print(f"Sample {i+1}:")
    print("True Class:", test_true_class)
    print("Predicted Probabilities:", output)
    print("Predicted Class:", predicted_class)
    print()

# Evaluate performance
# You can calculate metrics like accuracy, precision, recall, etc. here

